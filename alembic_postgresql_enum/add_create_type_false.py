import logging

import sqlalchemy
from alembic.operations.ops import (
    UpgradeOps,
    ModifyTableOps,
    AddColumnOp,
    CreateTableOp,
    DropColumnOp,
    DropTableOp,
)
from sqlalchemy import Column
from sqlalchemy.dialects import postgresql


class ReprWorkaround(postgresql.ENUM):
    """
    As postgresql.ENUM does not include create_type inside __repr__, we have to swap it with custom type
    """

    __module__ = "sqlalchemy.dialects.postgresql"

    def __repr__(self):
        return f"{super().__repr__()[:-1]}, create_type=False)".replace("ReprWorkaround", "ENUM").replace(
            ", metadata=MetaData()", ""
        )


log = logging.getLogger(f"alembic.{__name__}")


def get_replacement_type(column_type):
    replacement_enum_type = column_type

    if replacement_enum_type.__class__ == sqlalchemy.Enum:
        if not replacement_enum_type.native_enum:
            return replacement_enum_type

        log.info("%r converted into postgresql.ENUM", replacement_enum_type)
        replacement_enum_type = eval(repr(replacement_enum_type).replace("Enum", "postgresql.ENUM"))

    if isinstance(replacement_enum_type, postgresql.ENUM):
        if replacement_enum_type.create_type:
            log.info("create_type=False injected into %r", replacement_enum_type)

        replacement_enum_type.__class__ = ReprWorkaround

    return replacement_enum_type


def inject_repr_into_enums(column: Column):
    """Swap postgresql.ENUM class to ReprWorkaround for the column type"""
    if isinstance(column.type, sqlalchemy.ARRAY):
        column.type.item_type = get_replacement_type(column.type.item_type)
    else:
        column.type = get_replacement_type(column.type)


def add_create_type_false(upgrade_ops: UpgradeOps):
    """Add create_type=False to all postgresql.ENUM types that are generated by alembic"""
    for operations_group in upgrade_ops.ops:
        if isinstance(operations_group, ModifyTableOps):
            for operation in operations_group.ops:
                if isinstance(operation, AddColumnOp):
                    column: Column = operation.column

                    inject_repr_into_enums(column)

                elif isinstance(operation, DropColumnOp):
                    column: Column = operation._reverse.column

                    inject_repr_into_enums(column)

        elif isinstance(operations_group, CreateTableOp):
            for column in operations_group.columns:
                if isinstance(column, Column):
                    inject_repr_into_enums(column)

        elif isinstance(operations_group, DropTableOp):
            for column in operations_group._reverse.columns:
                if isinstance(column, Column):
                    inject_repr_into_enums(column)
