from enum import Enum

import sqlalchemy
from sqlalchemy import Column, MetaData, Table
from sqlalchemy.dialects import postgresql

from alembic_postgresql_enum.configuration import Config
from tests.base.run_migration_test_abc import CompareAndRunTestCase


class OldEnum(Enum):
    A = "a"
    B = "b"


class NewEnum(Enum):
    A = "a"
    B = "b"
    C = "c"


class TestNewArrayColumnColumn(CompareAndRunTestCase):
    config = Config(add_type_ignore=True)

    def get_database_schema(self) -> MetaData:
        database_schema = MetaData()
        Table("a", database_schema)  # , Column("value", postgresql.ARRAY(postgresql.ENUM(OldEnum)))
        Table(
            "b",
            database_schema,
            Column(
                "value",
                postgresql.ARRAY(postgresql.ENUM(OldEnum, name="my_enum")),
                server_default=sqlalchemy.text("ARRAY['A', 'B']::my_enum[]"),
            ),
        )
        return database_schema

    def get_target_schema(self) -> MetaData:
        target_schema = MetaData()
        Table(
            "a",
            target_schema,
            Column(
                "value",
                postgresql.ARRAY(postgresql.ENUM(NewEnum, name="my_enum")),
                server_default=sqlalchemy.text("ARRAY['A', 'B']::my_enum[]"),
            ),
        )
        Table(
            "b",
            target_schema,
            Column(
                "value",
                postgresql.ARRAY(postgresql.ENUM(NewEnum, name="my_enum")),
                server_default=sqlalchemy.text("ARRAY['A', 'B']::my_enum[]"),
            ),
        )
        return target_schema

    def get_expected_upgrade(self) -> str:
        return """
        # ### commands auto generated by Alembic - please adjust! ###
        op.add_column('a', sa.Column('value', postgresql.ARRAY(postgresql.ENUM('A', 'B', 'C', name='my_enum', create_type=False)), server_default=sa.text("ARRAY['A', 'B']::my_enum[]"), nullable=True))
        op.sync_enum_values(  # type: ignore[attr-defined]
            enum_schema='public',
            enum_name='my_enum',
            new_values=['A', 'B', 'C'],
            affected_columns=[TableReference(table_schema='public', table_name='a', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A', 'B']::my_enum[]"), TableReference(table_schema='public', table_name='b', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A'::my_enum, 'B'::my_enum]")],
            enum_values_to_rename=[],
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return """
        # ### commands auto generated by Alembic - please adjust! ###
        op.sync_enum_values(  # type: ignore[attr-defined]
            enum_schema='public',
            enum_name='my_enum',
            new_values=['A', 'B'],
            affected_columns=[TableReference(table_schema='public', table_name='a', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A', 'B']::my_enum[]"), TableReference(table_schema='public', table_name='b', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A'::my_enum, 'B'::my_enum]")],
            enum_values_to_rename=[],
        )
        op.drop_column('a', 'value')
        # ### end Alembic commands ###
        """


class TestNewArrayColumnColumnCustomContext(CompareAndRunTestCase):
    config = Config(add_type_ignore=True)
    disable_running = True

    migration_options_overrides = {
        "sqlalchemy_module_prefix": "sqlalchemy.",
        "alembic_module_prefix": "alembic.op.",
    }

    def get_database_schema(self) -> MetaData:
        database_schema = MetaData()
        Table("a", database_schema)  # , Column("value", postgresql.ARRAY(postgresql.ENUM(OldEnum)))
        Table(
            "b",
            database_schema,
            Column(
                "value",
                postgresql.ARRAY(postgresql.ENUM(OldEnum, name="my_enum")),
                server_default=sqlalchemy.text("ARRAY['A', 'B']::my_enum[]"),
            ),
        )
        return database_schema

    def get_target_schema(self) -> MetaData:
        target_schema = MetaData()
        Table(
            "a",
            target_schema,
            Column(
                "value",
                postgresql.ARRAY(postgresql.ENUM(NewEnum, name="my_enum")),
                server_default=sqlalchemy.text("ARRAY['A', 'B']::my_enum[]"),
            ),
        )
        Table(
            "b",
            target_schema,
            Column(
                "value",
                postgresql.ARRAY(postgresql.ENUM(NewEnum, name="my_enum")),
                server_default=sqlalchemy.text("ARRAY['A', 'B']::my_enum[]"),
            ),
        )
        return target_schema

    def get_expected_upgrade(self) -> str:
        sa_prefix = self.migration_options_overrides["sqlalchemy_module_prefix"]
        al_prefix = self.migration_options_overrides["alembic_module_prefix"]

        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        {al_prefix}add_column('a', {sa_prefix}Column('value', postgresql.ARRAY(postgresql.ENUM('A', 'B', 'C', name='my_enum', create_type=False)), server_default={sa_prefix}text("ARRAY['A', 'B']::my_enum[]"), nullable=True))
        {al_prefix}sync_enum_values(  # type: ignore[attr-defined]
            enum_schema='public',
            enum_name='my_enum',
            new_values=['A', 'B', 'C'],
            affected_columns=[TableReference(table_schema='public', table_name='a', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A', 'B']::my_enum[]"), TableReference(table_schema='public', table_name='b', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A'::my_enum, 'B'::my_enum]")],
            enum_values_to_rename=[],
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        al_prefix = self.migration_options_overrides["alembic_module_prefix"]

        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        {al_prefix}sync_enum_values(  # type: ignore[attr-defined]
            enum_schema='public',
            enum_name='my_enum',
            new_values=['A', 'B'],
            affected_columns=[TableReference(table_schema='public', table_name='a', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A', 'B']::my_enum[]"), TableReference(table_schema='public', table_name='b', column_name='value', column_type=ColumnType.ARRAY, existing_server_default="ARRAY['A'::my_enum, 'B'::my_enum]")],
            enum_values_to_rename=[],
        )
        {al_prefix}drop_column('a', 'value')
        # ### end Alembic commands ###
        """
