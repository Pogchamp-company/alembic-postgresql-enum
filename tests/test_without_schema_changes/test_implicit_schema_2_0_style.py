# Case No. 1 from https://github.com/Pogchamp-company/alembic-postgresql-enum/issues/26
import enum
from typing import TYPE_CHECKING

import pytest
import sqlalchemy

from alembic_postgresql_enum import get_defined_enums, get_declared_enums
from alembic_postgresql_enum.get_enum_data import TableReference
from tests.base.render_and_run import compare_and_run
from tests.schemas import ANOTHER_SCHEMA_NAME, DEFAULT_SCHEMA

if TYPE_CHECKING:
    from sqlalchemy import Connection
from sqlalchemy import MetaData, Column, Integer
from sqlalchemy.dialects.postgresql import ENUM


# Definition of my enum
class _TestStatus(enum.Enum):
    PENDING = "PENDING"
    SUCCESS = "SUCCESS"
    FAILED = "FAILED"


def get_my_metadata() -> MetaData:
    from sqlalchemy.orm import Mapped, mapped_column, DeclarativeBase

    my_metadata = MetaData(schema=ANOTHER_SCHEMA_NAME)

    class Base(DeclarativeBase):
        metadata = my_metadata

    # Definition of my model class
    class TableWithExplicitEnumSchema(Base):
        __tablename__ = "test"
        id = Column(Integer, primary_key=True)

        status: Mapped[_TestStatus] = mapped_column(
            ENUM(_TestStatus, name="test_status"),
            nullable=False,
        )

    return my_metadata


@pytest.mark.skipif(sqlalchemy.__version__.startswith('1.'), reason="Table are made in 2.0 style")
def test_get_defined_enums_metadata(connection: 'Connection'):
    my_metadata = get_my_metadata()
    database_schema = my_metadata
    database_schema.create_all(connection)

    function_result = get_defined_enums(connection, 'public')

    assert function_result == {
        'test_status': tuple(map(lambda item: item.value, _TestStatus))
    }


@pytest.mark.skipif(sqlalchemy.__version__.startswith('1.'), reason="Table are made in 2.0 style")
def test_get_declared_enums():
    my_metadata = get_my_metadata()
    declared_schema = my_metadata

    # Check that enum is not created inside `another` schema
    function_result = get_declared_enums(declared_schema, ANOTHER_SCHEMA_NAME, DEFAULT_SCHEMA)

    assert function_result.enum_values == {}
    assert function_result.enum_table_references == {}

    # Check that enum is created inside `public` schema
    function_result = get_declared_enums(declared_schema, DEFAULT_SCHEMA, DEFAULT_SCHEMA)

    assert function_result.enum_values == {
        'test_status': tuple(map(lambda item: item.value, _TestStatus))
    }
    assert function_result.enum_table_references == {
        'test_status': frozenset([TableReference('test', 'status')])
    }


@pytest.mark.skipif(sqlalchemy.__version__.startswith('1.'), reason="Table are made in 2.0 style")
def test_compare_and_run_create_table(connection: 'Connection'):
    my_metadata = get_my_metadata()
    target_schema = my_metadata

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='test_status').create(op.get_bind())
        op.create_table('test',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('PENDING', 'SUCCESS', 'FAILED', name='test_status', create_type=False), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        schema='another'
        )
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('test', schema='another')
        sa.Enum('PENDING', 'SUCCESS', 'FAILED', name='test_status').drop(op.get_bind())
        # ### end Alembic commands ###
    """)


@pytest.mark.skipif(sqlalchemy.__version__.startswith('1.'), reason="Table are made in 2.0 style")
def test_compare_and_run(connection: 'Connection'):
    my_metadata = get_my_metadata()
    database_schema = my_metadata
    database_schema.create_all(connection)

    target_schema = my_metadata

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        pass
        # ### end Alembic commands ###
    """)
