from typing import TYPE_CHECKING

import sqlalchemy
from alembic import autogenerate
from alembic.autogenerate import api
from alembic.operations import ops

from alembic_postgresql_enum.enum_creation import CreateEnumOp
from tests.base.render_and_run import compare_and_run
from tests.schemas import get_schema_with_enum_variants, USER_TABLE_NAME, USER_STATUS_ENUM_NAME, \
    get_schema_without_enum, USER_STATUS_COLUMN_NAME, DEFAULT_SCHEMA, CAR_COLORS_ENUM_NAME, \
    get_schema_with_enum_in_array_variants, get_car_schema_without_enum
from tests.utils.migration_context import create_migration_context

if TYPE_CHECKING:
    from sqlalchemy import Connection
from sqlalchemy import MetaData, Table, Column, Integer

def test_create_enum_before_add_column(connection: 'Connection'):
    """Check that library correctly creates enum before its use inside add_column"""
    database_schema = get_schema_without_enum()
    database_schema.create_all(connection)

    new_enum_variants = ["active", "passive"]

    target_schema = get_schema_with_enum_variants(new_enum_variants)

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').create(op.get_bind())
        op.add_column('{USER_TABLE_NAME}', sa.Column('{USER_STATUS_COLUMN_NAME}', postgresql.ENUM({', '.join(map(repr, new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', create_type=False), nullable=True))
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{USER_TABLE_NAME}', '{USER_STATUS_COLUMN_NAME}')
        sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """)


def test_create_enum_diff_tuple(connection: 'Connection'):
    """Check that library correctly creates enum before its use inside add_column"""
    database_schema = get_schema_without_enum()
    database_schema.create_all(connection)

    new_enum_variants = ["active", "passive"]

    target_schema = get_schema_with_enum_variants(new_enum_variants)

    context = create_migration_context(connection, target_schema)

    autogen_context = api.AutogenContext(context, target_schema)

    uo = ops.UpgradeOps(ops=[])
    autogenerate._produce_net_changes(autogen_context, uo)

    diffs = uo.as_diffs()
    assert len(diffs) == 2
    create_enum_tuple, add_column_tuple = diffs

    assert create_enum_tuple == (
        CreateEnumOp.operation_name,
        USER_STATUS_ENUM_NAME,
        DEFAULT_SCHEMA,
        tuple(new_enum_variants)
    )
    assert add_column_tuple[0] == 'add_column'


def test_create_enum_diff_tuple_with_array(connection: 'Connection'):
    """Check that library correctly creates enum before its use inside add_column"""
    database_schema = get_car_schema_without_enum()
    database_schema.create_all(connection)

    new_enum_variants = ['black', 'white', 'red', 'green', 'blue', 'other']

    target_schema = get_schema_with_enum_in_array_variants(new_enum_variants)

    context = create_migration_context(connection, target_schema)

    autogen_context = api.AutogenContext(context, target_schema)

    uo = ops.UpgradeOps(ops=[])
    autogenerate._produce_net_changes(autogen_context, uo)

    diffs = uo.as_diffs()
    assert len(diffs) == 2
    create_enum_tuple, add_column_tuple = diffs

    assert create_enum_tuple == (
        CreateEnumOp.operation_name,
        CAR_COLORS_ENUM_NAME,
        DEFAULT_SCHEMA,
        tuple(new_enum_variants)
    )
    assert add_column_tuple[0] == 'add_column'


def test_with_non_native_enum(connection: 'Connection'):
    """Check that library ignores sa.Enum that are not native"""
    database_schema = get_schema_without_enum()
    database_schema.create_all(connection)

    new_enum_variants = ["active", "passive"]

    target_schema = MetaData()

    Table(
        USER_TABLE_NAME,
        target_schema,
        Column("id", Integer, primary_key=True),
        Column(USER_STATUS_COLUMN_NAME, sqlalchemy.Enum(*new_enum_variants, name=USER_STATUS_ENUM_NAME,
                                                        native_enum=False))
    )

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.add_column('{USER_TABLE_NAME}', sa.Column('{USER_STATUS_COLUMN_NAME}', sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', native_enum=False), nullable=True))
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{USER_TABLE_NAME}', '{USER_STATUS_COLUMN_NAME}')
        # ### end Alembic commands ###
    """)
