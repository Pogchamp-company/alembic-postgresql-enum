from typing import TYPE_CHECKING

from sqlalchemy import MetaData

from tests.base.render_and_run import compare_and_run
from tests.schemas import get_schema_with_enum_variants, USER_TABLE_NAME, USER_STATUS_ENUM_NAME

if TYPE_CHECKING:
    from sqlalchemy import Connection


def test_drop_enum_after_drop_table(connection: 'Connection'):
    """Check that library correctly drop enum after drop_table"""
    dropped_enum_variants = ["active", "passive"]
    database_schema = get_schema_with_enum_variants(dropped_enum_variants)
    database_schema.create_all(connection)

    target_schema = MetaData()

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}')
        sa.Enum({', '.join(map(repr, dropped_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status').create(op.get_bind())
        op.create_table('users',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', create_type=False), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name='users_pkey')
        )
        # ### end Alembic commands ###
    """)
