from sqlalchemy import Table, Column, Integer, MetaData
from sqlalchemy.dialects import postgresql

from tests.base.run_migration_test_abc import CompareAndRunTestCase
from tests.schemas import (
    USER_TABLE_NAME,
    USER_STATUS_ENUM_NAME,
    USER_STATUS_COLUMN_NAME,
)


class TestCreateEnumOnCreateTableInsideNewSchema(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table inside new schema"""

    disable_running = True

    new_enum_variants = ["active", "passive"]
    non_existing_schema = "non_existing_schema"

    def get_database_schema(self) -> MetaData:
        return MetaData()

    def get_target_schema(self) -> MetaData:
        target_schema = MetaData(schema=self.non_existing_schema)
        Table(
            USER_TABLE_NAME,
            target_schema,
            Column("id", Integer, primary_key=True),
            Column(
                USER_STATUS_COLUMN_NAME,
                postgresql.ENUM(*self.new_enum_variants, name=USER_STATUS_ENUM_NAME, metadata=target_schema),
            ),
        )
        return target_schema

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status', schema='non_existing_schema').create(op.get_bind())
        op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', schema='non_existing_schema', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        schema='non_existing_schema'
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('users', schema='non_existing_schema')
        sa.Enum('active', 'passive', name='user_status', schema='non_existing_schema').drop(op.get_bind())
        # ### end Alembic commands ###    
        """
