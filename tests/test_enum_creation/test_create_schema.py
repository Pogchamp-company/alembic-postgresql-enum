import textwrap
from typing import TYPE_CHECKING

from alembic import autogenerate
from sqlalchemy.dialects import postgresql

from tests.schemas import (
    USER_TABLE_NAME,
    USER_STATUS_ENUM_NAME,
    USER_STATUS_COLUMN_NAME,
)
from tests.utils.migration_context import create_migration_context

if TYPE_CHECKING:
    from sqlalchemy import Connection
from sqlalchemy import Table, Column, Integer, MetaData


def test_create_enum_on_create_table_inside_new_schema(connection: "Connection"):
    """Check that library correctly creates enum before its use inside create_table inside new schema"""
    new_enum_variants = ["active", "passive"]
    non_existing_schema = "non_existing_schema"

    target_schema = MetaData(schema=non_existing_schema)

    Table(
        USER_TABLE_NAME,
        target_schema,
        Column("id", Integer, primary_key=True),
        Column(
            USER_STATUS_COLUMN_NAME,
            postgresql.ENUM(*new_enum_variants, name=USER_STATUS_ENUM_NAME, metadata=target_schema),
        ),
    )

    expected_upgrade = f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status', schema='non_existing_schema').create(op.get_bind())
        op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', schema='non_existing_schema', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        schema='non_existing_schema'
        )
        # ### end Alembic commands ###
    """
    expected_downgrade = f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('users', schema='non_existing_schema')
        sa.Enum('active', 'passive', name='user_status', schema='non_existing_schema').drop(op.get_bind())
        # ### end Alembic commands ###    
    """

    migration_context = create_migration_context(connection, target_schema)

    template_args = {}
    # todo _render_migration_diffs marked as legacy, maybe find something else
    autogenerate._render_migration_diffs(migration_context, template_args)

    upgrade_code = textwrap.dedent("    " + template_args["upgrades"])
    downgrade_code = textwrap.dedent("    " + template_args["downgrades"])

    expected_upgrade = textwrap.dedent(expected_upgrade).strip("\n ")
    expected_downgrade = textwrap.dedent(expected_downgrade).strip("\n ")

    assert upgrade_code == expected_upgrade, f"Got:\n{upgrade_code!r}\nExpected:\n{expected_upgrade!r}"
    assert downgrade_code == expected_downgrade, f"Got:\n{downgrade_code!r}\nExpected:\n{expected_downgrade!r}"
