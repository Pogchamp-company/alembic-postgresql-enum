from typing import TYPE_CHECKING

import sqlalchemy

from tests.base.render_and_run import compare_and_run
from tests.schemas import get_schema_with_enum_variants, USER_TABLE_NAME, USER_STATUS_ENUM_NAME, \
    get_car_schema_without_enum, get_schema_with_enum_in_array_variants, CAR_TABLE_NAME, CAR_COLORS_COLUMN_NAME, \
    CAR_COLORS_ENUM_NAME, USER_STATUS_COLUMN_NAME

if TYPE_CHECKING:
    from sqlalchemy import Connection
from sqlalchemy import Table, Column, Integer, MetaData


def test_create_enum_on_create_table(connection: 'Connection'):
    """Check that library correctly creates enum before its use inside create_table"""
    new_enum_variants = ["active", "passive"]

    target_schema = get_schema_with_enum_variants(new_enum_variants)

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status').create(op.get_bind())
        op.create_table('{USER_TABLE_NAME}',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}')
        sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """)


def test_create_enum_on_create_table_with_array(connection: 'Connection'):
    """Check that library correctly creates enum before its use inside create_table. Enum is used in ARRAY"""
    database_schema = get_car_schema_without_enum()
    database_schema.create_all(connection)

    new_enum_variants = ['black', 'white', 'red', 'green', 'blue', 'other']

    target_schema = get_schema_with_enum_in_array_variants(new_enum_variants)

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}').create(op.get_bind())
        op.add_column('{CAR_TABLE_NAME}', sa.Column('{CAR_COLORS_COLUMN_NAME}', postgresql.ARRAY(postgresql.ENUM({', '.join(map(repr, new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}')), nullable=True))
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{CAR_TABLE_NAME}', '{CAR_COLORS_COLUMN_NAME}')
        sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """)


def test_create_enum_on_create_table_with_sa_enum(connection: 'Connection'):
    """Check that library correctly creates enum before its use inside create_table. sqlalchemy.Enum is used
    sqlalchemy.Enum should be converted to postgresql.ENUM to specify create_type=False
    """
    new_enum_variants = ["active", "passive"]

    target_schema = MetaData()

    Table(
        USER_TABLE_NAME,
        target_schema,
        Column("id", Integer, primary_key=True),
        Column(USER_STATUS_COLUMN_NAME, sqlalchemy.Enum(*new_enum_variants, name=USER_STATUS_ENUM_NAME))
    )

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status').create(op.get_bind())
        op.create_table('{USER_TABLE_NAME}',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}')
        sa.Enum({', '.join(map(repr, new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """)
