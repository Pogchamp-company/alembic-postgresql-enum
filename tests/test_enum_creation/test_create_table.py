import sqlalchemy
from sqlalchemy import Table, Column, Integer, MetaData
from sqlalchemy.dialects import postgresql

from tests.base.run_migration_test_abc import CompareAndRunTestCase
from tests.schemas import (
    get_schema_with_enum_variants,
    USER_TABLE_NAME,
    USER_STATUS_ENUM_NAME,
    get_car_schema_without_enum,
    get_schema_with_enum_in_array_variants,
    CAR_TABLE_NAME,
    CAR_COLORS_COLUMN_NAME,
    CAR_COLORS_ENUM_NAME,
    USER_STATUS_COLUMN_NAME,
    ANOTHER_SCHEMA_NAME,
)


class TestCreateEnumOnCreateTable(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table"""

    new_enum_variants = ["active", "passive"]

    def get_database_schema(self) -> MetaData:
        return MetaData()

    def get_target_schema(self) -> MetaData:
        return get_schema_with_enum_variants(self.new_enum_variants)

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status').create(op.get_bind())
        op.create_table('{USER_TABLE_NAME}',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}')
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
        """


class TestCreateEnumOnCreateTableWithArray(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table. Enum is used in ARRAY"""

    new_enum_variants = ["black", "white", "red", "green", "blue", "other"]

    def get_database_schema(self) -> MetaData:
        return get_car_schema_without_enum()

    def get_target_schema(self) -> MetaData:
        return get_schema_with_enum_in_array_variants(self.new_enum_variants)

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}').create(op.get_bind())
        op.add_column('{CAR_TABLE_NAME}', sa.Column('{CAR_COLORS_COLUMN_NAME}', postgresql.ARRAY(postgresql.ENUM({', '.join(map(repr, self.new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}', create_type=False)), nullable=True))
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{CAR_TABLE_NAME}', '{CAR_COLORS_COLUMN_NAME}')
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
        """


class TestCreateEnumOnCreateTableWithSaEnum(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table. sqlalchemy.Enum is used
    sqlalchemy.Enum should be converted to postgresql.ENUM to specify create_type=False
    """

    new_enum_variants = ["active", "passive"]

    def get_database_schema(self) -> MetaData:
        return MetaData()

    def get_target_schema(self) -> MetaData:
        target_schema = MetaData()
        Table(
            USER_TABLE_NAME,
            target_schema,
            Column("id", Integer, primary_key=True),
            Column(
                USER_STATUS_COLUMN_NAME,
                sqlalchemy.Enum(*self.new_enum_variants, name=USER_STATUS_ENUM_NAME),
            ),
        )
        return target_schema

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum('active', 'passive', name='user_status').create(op.get_bind())
        op.create_table('{USER_TABLE_NAME}',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM('active', 'passive', name='user_status', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}')
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
        """


class TestCreateEnumOnCreateTableWithAnotherSchema(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table inside another table_schema"""

    new_enum_variants = ["active", "passive"]

    def get_database_schema(self) -> MetaData:
        return MetaData()

    def get_target_schema(self) -> MetaData:
        target_schema = MetaData()

        Table(
            USER_TABLE_NAME,
            target_schema,
            Column("id", Integer, primary_key=True),
            Column(
                USER_STATUS_COLUMN_NAME,
                postgresql.ENUM(
                    *self.new_enum_variants,
                    name=USER_STATUS_ENUM_NAME,
                    schema=ANOTHER_SCHEMA_NAME,
                ),
            ),
            schema=ANOTHER_SCHEMA_NAME,
        )

        return target_schema

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', schema='{ANOTHER_SCHEMA_NAME}').create(op.get_bind())
        op.create_table('{USER_TABLE_NAME}',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', schema='{ANOTHER_SCHEMA_NAME}', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        schema='{ANOTHER_SCHEMA_NAME}'
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}', schema='{ANOTHER_SCHEMA_NAME}')
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', schema='{ANOTHER_SCHEMA_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
        """


class TestCreateEnumOnCreateTableWithAnotherSchemaOnMetadata(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table inside another schema, specified on Metadata"""

    new_enum_variants = ["active", "passive"]

    def get_database_schema(self) -> MetaData:
        return MetaData()

    def get_target_schema(self) -> MetaData:
        target_schema = MetaData(schema=ANOTHER_SCHEMA_NAME)

        Table(
            USER_TABLE_NAME,
            target_schema,
            Column("id", Integer, primary_key=True),
            Column(
                USER_STATUS_COLUMN_NAME,
                postgresql.ENUM(*self.new_enum_variants, name=USER_STATUS_ENUM_NAME, metadata=target_schema),
            ),
        )

        return target_schema

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', schema='{ANOTHER_SCHEMA_NAME}').create(op.get_bind())
        op.create_table('{USER_TABLE_NAME}',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('status', postgresql.ENUM({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', schema='{ANOTHER_SCHEMA_NAME}', create_type=False), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        schema='{ANOTHER_SCHEMA_NAME}'
        )
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table('{USER_TABLE_NAME}', schema='{ANOTHER_SCHEMA_NAME}')
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{USER_STATUS_ENUM_NAME}', schema='{ANOTHER_SCHEMA_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
        """
