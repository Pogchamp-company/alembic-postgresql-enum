from typing import TYPE_CHECKING

from alembic_postgresql_enum.enum_deletion import DropEnumOp

if TYPE_CHECKING:
    from sqlalchemy import Connection

from tests.schemas import (get_schema_with_enum_in_array_variants,
                           CAR_TABLE_NAME,
                           CAR_COLORS_COLUMN_NAME,
                           CAR_COLORS_ENUM_NAME, get_car_schema_without_enum
                           )
from typing import TYPE_CHECKING

from alembic import autogenerate
from alembic.autogenerate import api
from alembic.operations import ops

from tests.base.render_and_run import compare_and_run
from tests.schemas import get_schema_with_enum_variants, USER_TABLE_NAME, USER_STATUS_ENUM_NAME, \
    get_schema_without_enum, USER_STATUS_COLUMN_NAME, DEFAULT_SCHEMA
from tests.utils.migration_context import create_migration_context

if TYPE_CHECKING:
    from sqlalchemy import Connection


def test_delete_enum_after_drop_column(connection: 'Connection'):
    """Check that library correctly removes unused enum after drop_column"""
    enum_variants_to_delete = ["active", "passive"]
    database_schema = get_schema_with_enum_variants(enum_variants_to_delete)
    database_schema.create_all(connection)

    target_schema = get_schema_without_enum()

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{USER_TABLE_NAME}', '{USER_STATUS_COLUMN_NAME}')
        sa.Enum({', '.join(map(repr, enum_variants_to_delete))}, name='{USER_STATUS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, enum_variants_to_delete))}, name='{USER_STATUS_ENUM_NAME}').create(op.get_bind())
        op.add_column('{USER_TABLE_NAME}', sa.Column('{USER_STATUS_COLUMN_NAME}', postgresql.ENUM({', '.join(map(repr, enum_variants_to_delete))}, name='{USER_STATUS_ENUM_NAME}', create_type=False), autoincrement=False, nullable=True))
        # ### end Alembic commands ###
    """)  # For some reason alembic decided to add redundant autoincrement=False on downgrade


def test_delete_enum_after_drop_column_with_array(connection: 'Connection'):
    """Check that library correctly removes unused enum after drop_column. Enum is used in ARRAY"""
    enum_variants_to_delete = ['black', 'white', 'red', 'green', 'blue', 'other']
    database_schema = get_schema_with_enum_in_array_variants(enum_variants_to_delete)
    database_schema.create_all(connection)

    target_schema = get_car_schema_without_enum()

    compare_and_run(connection, target_schema, expected_upgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{CAR_TABLE_NAME}', '{CAR_COLORS_COLUMN_NAME}')
        sa.Enum({', '.join(map(repr, enum_variants_to_delete))}, name='{CAR_COLORS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
    """, expected_downgrade=f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, enum_variants_to_delete))}, name='{CAR_COLORS_ENUM_NAME}').create(op.get_bind())
        op.add_column('{CAR_TABLE_NAME}', sa.Column('{CAR_COLORS_COLUMN_NAME}', postgresql.ARRAY(postgresql.ENUM({', '.join(map(repr, enum_variants_to_delete))}, name='{CAR_COLORS_ENUM_NAME}')), autoincrement=False, nullable=True))
        # ### end Alembic commands ###
    """)


def test_delete_enum_diff_tuple(connection: 'Connection'):
    """Check that library correctly removes unused enum"""
    old_enum_variants = ["active", "passive"]
    database_schema = get_schema_with_enum_variants(old_enum_variants)
    database_schema.create_all(connection)

    target_schema = get_schema_without_enum()

    context = create_migration_context(connection, target_schema)

    autogen_context = api.AutogenContext(context, target_schema)

    uo = ops.UpgradeOps(ops=[])
    autogenerate._produce_net_changes(autogen_context, uo)

    diffs = uo.as_diffs()
    assert len(diffs) == 2
    remove_column_tuple, create_enum_tuple = diffs

    assert remove_column_tuple[0] == 'remove_column'
    assert create_enum_tuple == (
        DropEnumOp.operation_name,
        USER_STATUS_ENUM_NAME,
        DEFAULT_SCHEMA,
        tuple(old_enum_variants)
    )


def test_delete_enum_diff_tuple_with_array(connection: 'Connection'):
    """Check that library correctly removes unused enum"""
    old_enum_variants = ['black', 'white', 'red', 'green', 'blue', 'other']
    database_schema = get_schema_with_enum_in_array_variants(old_enum_variants)
    database_schema.create_all(connection)

    target_schema = get_car_schema_without_enum()

    context = create_migration_context(connection, target_schema)

    autogen_context = api.AutogenContext(context, target_schema)

    uo = ops.UpgradeOps(ops=[])
    autogenerate._produce_net_changes(autogen_context, uo)

    diffs = uo.as_diffs()
    assert len(diffs) == 2
    remove_column_tuple, create_enum_tuple = diffs

    assert remove_column_tuple[0] == 'remove_column'
    assert create_enum_tuple == (
        DropEnumOp.operation_name,
        CAR_COLORS_ENUM_NAME,
        DEFAULT_SCHEMA,
        tuple(old_enum_variants)
    )
