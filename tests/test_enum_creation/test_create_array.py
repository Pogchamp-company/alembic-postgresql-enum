from typing import List

import sqlalchemy
from sqlalchemy import Table, Column, Integer, MetaData

from tests.base.run_migration_test_abc import CompareAndRunTestCase
from tests.schemas import (
    get_car_schema_without_enum,
    CAR_TABLE_NAME,
    CAR_COLORS_COLUMN_NAME,
    CAR_COLORS_ENUM_NAME,
)


def get_schema_with_enum_in_sqlalchemy_array_variants(variants: List[str]) -> MetaData:
    schema = MetaData()

    Table(
        CAR_TABLE_NAME,
        schema,
        Column("id", Integer, primary_key=True),
        Column(
            CAR_COLORS_COLUMN_NAME,
            sqlalchemy.ARRAY(sqlalchemy.Enum(*variants, name=CAR_COLORS_ENUM_NAME)),
        ),
    )

    return schema


class TestCreateEnumOnCreateTableWithArray(CompareAndRunTestCase):
    """Check that library correctly creates enum before its use inside create_table. Enum is used in ARRAY"""

    new_enum_variants = ["black", "white", "red", "green", "blue", "other"]

    def get_database_schema(self) -> MetaData:
        return get_car_schema_without_enum()

    def get_target_schema(self) -> MetaData:
        return get_schema_with_enum_in_sqlalchemy_array_variants(self.new_enum_variants)

    def get_expected_upgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}').create(op.get_bind())
        op.add_column('{CAR_TABLE_NAME}', sa.Column('{CAR_COLORS_COLUMN_NAME}', sa.ARRAY(postgresql.ENUM({', '.join(map(repr, self.new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}', create_type=False)), nullable=True))
        # ### end Alembic commands ###
        """

    def get_expected_downgrade(self) -> str:
        return f"""
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_column('{CAR_TABLE_NAME}', '{CAR_COLORS_COLUMN_NAME}')
        sa.Enum({', '.join(map(repr, self.new_enum_variants))}, name='{CAR_COLORS_ENUM_NAME}').drop(op.get_bind())
        # ### end Alembic commands ###
        """
